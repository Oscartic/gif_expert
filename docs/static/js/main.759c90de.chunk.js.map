{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","upValue","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","console","log","image","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAgBhD,OACE,0BAAMC,SARa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,OAKd,2BACEO,KAAK,OACLC,MAAQT,EACRU,SAjBoB,SAACP,GACzB,IAAMQ,EAAUR,EAAES,OAAOH,MACzBR,EAAcU,Q,uBCTLE,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAWH,GAD5C,+DAEEI,MAAOF,GAFT,cAEfG,EAFe,gBAGEA,EAASC,OAHX,uBAGbC,EAHa,EAGbA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARjB,kBAYdM,GAZc,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAEnC,OACE,yBAAKc,UAAU,2DACb,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAKA,KCFEO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAAEA,GAAe,IAAD,EAEhBf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAJ+B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAe1C,OARCC,qBAAW,WACVxB,EAASC,GACNwB,MAAK,SAAAX,GAAM,OAAIS,EAAS,CACvBf,KAAMM,EACNO,SAAS,SAEZ,CAACpB,IAEGqB,EDX0BI,CAAczB,GAAlCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAUrB,OARAM,QAAQC,IAAId,EAAQO,GASlB,oCAEE,wBAAIJ,UAAU,qCAAsChB,GAElDoB,GAAW,uBAAGJ,UAAU,oCAAb,WAEb,yBAAKA,UAAU,aAGXH,EAAOJ,KAAK,SAACmB,GAAD,OACR,kBAAC,EAAD,eACEC,IAAMD,EAAMjB,IACPiB,UEKNE,EA/BM,WAAM,MAIW7C,mBAAS,CAAC,cAJrB,mBAIlBQ,EAJkB,KAINT,EAJM,KAWzB,OACE,6BACI,4CACA,kBAAC,EAAD,CAAaA,cAAkBA,IAC/B,6BAEA,4BAEIS,EAAWgB,KAAI,SAAAT,GAAQ,OACrB,kBAAC,EAAD,CACEA,SAAWA,EACX6B,IAAM7B,UCrBtB+B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.759c90de.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    const upValue = e.target.value;\n    setInputValue(upValue);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if(inputValue.trim().length > 2){\n      setCategories(categories => [inputValue, ...categories]) // para cuando no se tiene acceso a categories \n      setInputValue('');\n    }\n  }  \n  return (\n    <form onSubmit={ handleSubmit }>\n      <input \n        type=\"text\"\n        value={ inputValue }\n        onChange={ handleInputChange }\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}","export const getGifs = async ( category ) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=QrGdQXcqBv7W9lzDSvci9K3KgvoRamem`;\n  const response = await fetch( url );\n  const { data } = await response.json();\n  const gifs = data.map( img => {\n    return { \n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url // el ? confirma si viene algo \n    }\n  })\n\n  return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url  }) => {\n  \n  return (\n    <div className='card animate__animated animate__fadeIn animate_delay-4s'>\n      <img src={ url } alt={ title }/>\n      <p>{ title }</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ({category}) => {\n  \n  const { data:images, loading } = useFetchGifs( category );\n\n  console.log(images, loading);\n\n\n\n\n\n  // getGif(); \n\n  return (\n    <>\n      \n      <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n\n      { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n \n      <div className=\"card-grid\">\n      \n        {\n          images.map( (image) => ( \n              <GifGridItem \n                key={ image.id } \n                { ...image } \n              />\n            ) \n          ) \n        }\n      \n      </div>\n    </>\n  )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n   useEffect( () => {\n    getGifs( category )\n      .then(images => setState({\n        data: images,\n        loading: false\n      }));\n  }, [category] );\n\n  return state; \n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n  // const categories = ['One Punch', 'Samurai X', 'Dragon Ball']; \n  \n  const [categories, setCategories] = useState(['One Punch']);\n\n  // const handleAddCategory = () => {\n  //   const newValue = 'Chavo del Ocho';\n  //   setCategories([newValue, ...categories])\n  // }\n\n  return (\n    <div>\n        <h2>GifExpertApp</h2>\n        <AddCategory setCategories = { setCategories }/> \n        <hr/>\n\n        <ol>\n          {\n            categories.map(category => \n              <GifGrid \n                category={ category } \n                key={ category }  \n              />\n            )\n          }\n        </ol>\n    </div>\n  )\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}